// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Amaris.Foundation.CrowdAct.NetDal.Entities
{

    // Address
    [Table("Address", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Address
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ID", Order = 1, TypeName = "int")]
        [Index(@"PK_Address", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // ID (Primary key)

        [Column(@"Name", Order = 2, TypeName = "nvarchar(max)")]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name

        [Column(@"Complement", Order = 3, TypeName = "nvarchar(max)")]
        [Display(Name = "Complement")]
        public string Complement { get; set; } // Complement

        [Column(@"ZipCode", Order = 4, TypeName = "nvarchar(max)")]
        [DataType(DataType.PostalCode)]
        [Display(Name = "Zip code")]
        public string ZipCode { get; set; } // ZipCode

        [Column(@"CityID", Order = 5, TypeName = "int")]
        [Index(@"IX_Address_CityID", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "City ID")]
        public int? CityId { get; set; } // CityID

        // Reverse navigation

        /// <summary>
        /// Child Activities where [Activity].[AddressID] point to this entity (FK_Activity_Address_AddressID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Activity> Activities { get; set; } // Activity.FK_Activity_Address_AddressID
        /// <summary>
        /// Child Charities where [Charity].[AddressID] point to this entity (FK_Charity_Address_AddressID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Charity> Charities { get; set; } // Charity.FK_Charity_Address_AddressID
        /// <summary>
        /// Child Users where [User].[AddressID] point to this entity (FK_User_Address_AddressID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<User> Users { get; set; } // User.FK_User_Address_AddressID

        // Foreign keys

        /// <summary>
        /// Parent City pointed by [Address].([CityId]) (FK_Address_City_CityID)
        /// </summary>
        [ForeignKey("CityId")] public virtual City City { get; set; } // FK_Address_City_CityID

        public Address()
        {
            Activities = new System.Collections.Generic.List<Activity>();
            Charities = new System.Collections.Generic.List<Charity>();
            Users = new System.Collections.Generic.List<User>();
        }
    }

}
// </auto-generated>
