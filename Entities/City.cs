// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AmaFon.CrowdAct.Net.DataLayer.Entities
{

    // City
    [Table("City", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class City
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ID", Order = 1, TypeName = "int")]
        [Index(@"PK_City", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // ID (Primary key)

        [Column(@"Label", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_City_Label", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(450)]
        [StringLength(450)]
        [Display(Name = "Label")]
        public string Label { get; set; } // Label (length: 450)

        [Column(@"CountryID", Order = 3, TypeName = "int")]
        [Index(@"IX_City_CountryID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Country ID")]
        public int CountryId { get; set; } // CountryID

        // Reverse navigation

        /// <summary>
        /// Child Addresses where [Address].[CityID] point to this entity (FK_Address_City_CityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Address> Addresses { get; set; } // Address.FK_Address_City_CityID

        // Foreign keys

        /// <summary>
        /// Parent Country pointed by [City].([CountryId]) (FK_City_Country_CountryID)
        /// </summary>
        [ForeignKey("CountryId"), Required] public virtual Country Country { get; set; } // FK_City_Country_CountryID

        public City()
        {
            Addresses = new System.Collections.Generic.List<Address>();
        }
    }

}
// </auto-generated>
