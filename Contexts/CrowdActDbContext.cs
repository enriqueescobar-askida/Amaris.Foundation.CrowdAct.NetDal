// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace AmaFon.CrowdAct.Net.DataLayer.Contexts
{
    using Configurations;
    using Entities;
    using Interfaces;

    /// <summary>
    /// Defines the <see cref="CrowdActDbContext" />
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CrowdActDbContext : System.Data.Entity.DbContext, ICrowdActDbContext
    {
		    #region Constructor
        /// <summary>
        /// Initializes static members of the <see cref="CrowdActDbContext"/> class.
        /// </summary>
        static CrowdActDbContext()
        {
            System.Data.Entity.Database.SetInitializer<CrowdActDbContext>(null);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CrowdActDbContext"/> class.
        /// </summary>
        public CrowdActDbContext()
            : base("Name=CrowdActConnectionString")
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CrowdActDbContext"/> class.
        /// </summary>
        /// <param name="connectionString">The connectionString<see cref="string"/></param>
        public CrowdActDbContext(string connectionString)
            : base(connectionString)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CrowdActDbContext"/> class.
        /// </summary>
        /// <param name="connectionString">The connectionString<see cref="string"/></param>
        /// <param name="model">The model<see cref="System.Data.Entity.Infrastructure.DbCompiledModel"/></param>
        public CrowdActDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CrowdActDbContext"/> class.
        /// </summary>
        /// <param name="existingConnection">The existingConnection<see cref="System.Data.Common.DbConnection"/></param>
        /// <param name="contextOwnsConnection">The contextOwnsConnection<see cref="bool"/></param>
        public CrowdActDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CrowdActDbContext"/> class.
        /// </summary>
        /// <param name="existingConnection">The existingConnection<see cref="System.Data.Common.DbConnection"/></param>
        /// <param name="model">The model<see cref="System.Data.Entity.Infrastructure.DbCompiledModel"/></param>
        /// <param name="contextOwnsConnection">The contextOwnsConnection<see cref="bool"/></param>
        public CrowdActDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }
		    #endregion

        /// <summary>
        /// Gets or sets the AccountStatus
        /// </summary>
        public System.Data.Entity.DbSet<AccountStatus> AccountStatus { get; set; }

        /// <summary>
        /// Gets or sets the Activities
        /// </summary>
        public System.Data.Entity.DbSet<Activity> Activities { get; set; }

        /// <summary>
        /// Gets or sets the ActivityLanguages
        /// </summary>
        public System.Data.Entity.DbSet<ActivityLanguage> ActivityLanguages { get; set; }

        /// <summary>
        /// Gets or sets the ActivityParticipants
        /// </summary>
        public System.Data.Entity.DbSet<ActivityParticipant> ActivityParticipants { get; set; }

        /// <summary>
        /// Gets or sets the ActivityTypes
        /// </summary>
        public System.Data.Entity.DbSet<ActivityType> ActivityTypes { get; set; }

        /// <summary>
        /// Gets or sets the Addresses
        /// </summary>
        public System.Data.Entity.DbSet<Address> Addresses { get; set; }

        /// <summary>
        /// Gets or sets the Categories
        /// </summary>
        public System.Data.Entity.DbSet<Category> Categories { get; set; }

        /// <summary>
        /// Gets or sets the Charities
        /// </summary>
        public System.Data.Entity.DbSet<Charity> Charities { get; set; }

        /// <summary>
        /// Gets or sets the Cities
        /// </summary>
        public System.Data.Entity.DbSet<City> Cities { get; set; }

        /// <summary>
        /// Gets or sets the Countries
        /// </summary>
        public System.Data.Entity.DbSet<Country> Countries { get; set; }

        /// <summary>
        /// Gets or sets the EfMigrationsHistories
        /// </summary>
        public System.Data.Entity.DbSet<EfMigrationsHistory> EfMigrationsHistories { get; set; }

        /// <summary>
        /// Gets or sets the Languages
        /// </summary>
        public System.Data.Entity.DbSet<Language> Languages { get; set; }

        /// <summary>
        /// Gets or sets the ParticipantStatus
        /// </summary>
        public System.Data.Entity.DbSet<ParticipantStatus> ParticipantStatus { get; set; }

        /// <summary>
        /// Gets or sets the Requirements
        /// </summary>
        public System.Data.Entity.DbSet<Requirement> Requirements { get; set; }

        /// <summary>
        /// Gets or sets the RequirementStatus
        /// </summary>
        public System.Data.Entity.DbSet<RequirementStatus> RequirementStatus { get; set; }

        /// <summary>
        /// Gets or sets the ResourceTypes
        /// </summary>
        public System.Data.Entity.DbSet<ResourceType> ResourceTypes { get; set; }

        /// <summary>
        /// Gets or sets the Skills
        /// </summary>
        public System.Data.Entity.DbSet<Skill> Skills { get; set; }

        /// <summary>
        /// Gets or sets the Users
        /// </summary>
        public System.Data.Entity.DbSet<User> Users { get; set; }

        /// <summary>
        /// The Dispose
        /// </summary>
        /// <param name="disposing">The disposing<see cref="bool"/></param>
        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        /// <summary>
        /// The IsSqlParameterNull
        /// </summary>
        /// <param name="param">The param<see cref="System.Data.SqlClient.SqlParameter"/></param>
        /// <returns>The <see cref="bool"/></returns>
        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        #region OnModel
        /// <summary>
        /// The OnModelCreating
        /// </summary>
        /// <param name="modelBuilder">The modelBuilder<see cref="System.Data.Entity.DbModelBuilder"/></param>
        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AccountStatusConfiguration());
            modelBuilder.Configurations.Add(new ActivityConfiguration());
            modelBuilder.Configurations.Add(new ActivityLanguageConfiguration());
            modelBuilder.Configurations.Add(new ActivityParticipantConfiguration());
            modelBuilder.Configurations.Add(new ActivityTypeConfiguration());
            modelBuilder.Configurations.Add(new AddressConfiguration());
            modelBuilder.Configurations.Add(new CategoryConfiguration());
            modelBuilder.Configurations.Add(new CharityConfiguration());
            modelBuilder.Configurations.Add(new CityConfiguration());
            modelBuilder.Configurations.Add(new CountryConfiguration());
            modelBuilder.Configurations.Add(new EfMigrationsHistoryConfiguration());
            modelBuilder.Configurations.Add(new LanguageConfiguration());
            modelBuilder.Configurations.Add(new ParticipantStatusConfiguration());
            modelBuilder.Configurations.Add(new RequirementConfiguration());
            modelBuilder.Configurations.Add(new RequirementStatusConfiguration());
            modelBuilder.Configurations.Add(new ResourceTypeConfiguration());
            modelBuilder.Configurations.Add(new SkillConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
        }

        /// <summary>
        /// The CreateModel
        /// </summary>
        /// <param name="modelBuilder">The modelBuilder<see cref="System.Data.Entity.DbModelBuilder"/></param>
        /// <param name="schema">The schema<see cref="string"/></param>
        /// <returns>The <see cref="System.Data.Entity.DbModelBuilder"/></returns>
        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AccountStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new ActivityConfiguration(schema));
            modelBuilder.Configurations.Add(new ActivityLanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new ActivityParticipantConfiguration(schema));
            modelBuilder.Configurations.Add(new ActivityTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new CategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new CharityConfiguration(schema));
            modelBuilder.Configurations.Add(new CityConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryConfiguration(schema));
            modelBuilder.Configurations.Add(new EfMigrationsHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new LanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new ParticipantStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new RequirementConfiguration(schema));
            modelBuilder.Configurations.Add(new RequirementStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new ResourceTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SkillConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            return modelBuilder;
        }
        #endregion
    }
}
// </auto-generated>